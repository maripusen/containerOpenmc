BootStrap: docker

From: fedora:39



%files 
    #/Users/mtorsvoll/documents/utvikling4580/endfb-vii.1-hdf5 /openmc_install

%post 
    echo $SHELL 

    mkdir openmc_install && cd openmc_install
    ls 
    pwd 

    ##obtaining cross sections and depletion chains
    
    pwd 
    
    #dnf upgrade -y --refresh 
    dnf makecache -y --refresh
    dnf install -y wget

    dnf install -y xz 



    ##
    ## dependencies for openmc 
    ##

    #dnf install -y build-essential 

    #dnf install -y make 


    ####

    dnf install -y hdf5-devel

    #dnf install -y hdf5 

    dnf install -y libpng-devel 

    #dnf install -y libtool

    dnf groupinstall -y "Development Tools" "Development Libraries"

    dnf install -y gcc

    #dnf install -y clang

    #dnf install -y fmt 

    #dnf install -y gsl

    #dnf install -y automake 

    #dnf install -y kernel-devel

    dnf install -y g++

    dnf install -y cmake

    dnf install -y git 

    dnf install -y xtensor 

    ##Testings 

    dnf install -y mpich 

    dnf install -y openmpi 

    ##Python packages and such 


    dnf install -y python-devel

    dnf install -y python3-pip 
    
    dnf install -y python3-h5py

    dnf install -y cython


    dnf install -y numpy 

    #dnf install -y pandas

    #dnf install -y matplotlib

    
    ##
    ##python packages
    ##

    pip3 install --upgrade pip setuptools wheel

    #pip3 install xtensor

    #pip3 install h5py
    
    #pip3 install numpy 

    #pip3 install pandas

    #pip3 install matplotlib


    ##
    ##installing openmc
    ##

    #git clone --recurse-submodules https://github.com/openmc-dev/openmc.git
    
    
    #cd openmc
    #mkdir build && cd build
    #cmake -DCMAKE_CXX_COMPILER=/usr/bin/g++ ..
    #make 
    #make install 
    #cd ..
    
    
    #python3 -m pip install .


    #attempting conda install 
    mkdir -p ~/miniconda3
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O ~/miniconda3/miniconda.sh
    bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
    rm -rf ~/miniconda3/miniconda.sh

    ~/miniconda3/bin/conda init bash
    source ~/.bash_profile
    source ~/.bashrc

    cd ..

    conda config --add channels conda-forge
    
    conda create --name openmc_env python=3.11
    conda activate openmc_env
    conda install -c conda-forge openmc
    
    ##
    ## testing openmc cross section installation 
    ##
    
    
    #cd ..
    #ls 
    #cd /endfb-vii.1-hdf5
    #ls 
    #pwd 



%environment 
    #export OPENMC_CROSS_SECTIONS=~/openmc_install/endfb-vii.1-hdf5/cross_sections.xml 


%runscript
    #!/usr/bin/env bash

    echo "This is an apptainer container for the neutron transport code"
    echo "Based on Linux distro Fedora39 for now." 
    echo "Container assembled by Marius Torsvoll, 2024"
    echo ""
    echo "Current directory:" $(pwd)
    echo "Content:"
    ls -lah
    echo "Running OpenMC with arguments:"
    echo $@
    echo
    
    python3 $@

%labels
    Author: Marius Torsvoll

%help 
    This container runs the neutron transport code openMC 

    To just run openMC with a given input file, run the container as
    `apptainer run prototype.sif INPUTFILE`

    or 

    `./prototype.sif INPUTFILE`

    To open a new shell inside the container, simply do:
    `apptainer shell prototype.sif`
    This will give you a new terminal with openMC and related tools installed,
    and e.g. your home directory mounted.

    To see this help text, run
    `apptainer run-help prototype.sif`